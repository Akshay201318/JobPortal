[{"/home/raghav/Desktop/ReactApps/candidatesforjob/src/reportWebVitals.js":"1","/home/raghav/Desktop/ReactApps/candidatesforjob/src/componants/Home.js":"2","/home/raghav/Desktop/ReactApps/candidatesforjob/src/index.js":"3","/home/raghav/Desktop/ReactApps/candidatesforjob/src/componants/App.js":"4","/home/raghav/Desktop/ReactApps/candidatesforjob/src/componants/CandidateProfile.js":"5"},{"size":362,"mtime":1609741674659,"results":"6","hashOfConfig":"7"},{"size":1052,"mtime":1609763537952,"results":"8","hashOfConfig":"7"},{"size":596,"mtime":1609742837231,"results":"9","hashOfConfig":"7"},{"size":849,"mtime":1609762975346,"results":"10","hashOfConfig":"7"},{"size":791,"mtime":1609766910592,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14urknm",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/home/raghav/Desktop/ReactApps/candidatesforjob/src/reportWebVitals.js",[],"/home/raghav/Desktop/ReactApps/candidatesforjob/src/componants/Home.js",[],"/home/raghav/Desktop/ReactApps/candidatesforjob/src/index.js",[],["24","25"],"/home/raghav/Desktop/ReactApps/candidatesforjob/src/componants/App.js",[],"/home/raghav/Desktop/ReactApps/candidatesforjob/src/componants/CandidateProfile.js",["26","27"],"import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom';\n\nexport default function CandidateProfile({candidates}) {\n     \n    const [candidate, setCandidate]=useState({});\n    const {id}=useParams();\n    \n    useEffect(()=>{\n        const candi=candidates.find((candidate)=> candidate.id === id);\n        setCandidate(candi);\n    },[]);\n    return (\n        <div className=\"profileContainer\">\n            <div className=\"profilePicture\" >\n            <div><img src={candidate.Image} alt=\"profile picture\"></img></div>\n            </div>\n            <div className=\"profileDetails\">\n                <div className=\"userName\">{candidate.name}</div>\n                <div className=\"userName\">{candidate.id}</div>\n            </div>\n        </div>\n    )\n}\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":12,"column":7,"nodeType":"34","endLine":12,"endColumn":9,"suggestions":"35"},{"ruleId":"36","severity":1,"message":"37","line":16,"column":18,"nodeType":"38","endLine":16,"endColumn":67},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'candidates' and 'id'. Either include them or remove the dependency array.","ArrayExpression",["41"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [candidates, id]",{"range":"44","text":"45"},[371,373],"[candidates, id]"]